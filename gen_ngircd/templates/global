[Global]
	# The [Global] section of this file is used to define the main
	# configuration of the server, like the server name and the ports
	# on which the server should be listening.
	# These settings depend on your personal preferences, so you should
	# make sure that they correspond to your installation and setup!

	# Server name in the IRC network, must contain at least one dot
	# (".") and be unique in the IRC network. Required!
	Name = <%= servername %>

	# Information about the server and the administrator, used by the
	# ADMIN command. Not required by server but by RFC!
<% if serverinfo["AdminInfo1"] -%>
	AdminInfo1 = <%= serverinfo["AdminInfo1"] %>
<% else -%>
	AdminInfo1 = Debian
<% end -%>
<% if serverinfo["AdminInfo2"] -%>
	AdminInfo2 = <%= serverinfo["AdminInfo2"] %>
<% else -%>
	AdminInfo2 = Debian City
<% end -%>
<% if serverinfo["AdminEMail"] -%>
	AdminEMail = <%= serverinfo["AdminEMail"] %>
<% else -%>
	AdminEMail = email@not.valid
<% end -%>

	# Info text of the server. This will be shown by WHOIS and
	# LINKS requests for example.
<% if serverinfo["Info"] -%>
	Info = <%= serverinfo["Info"] -%>
<% else -%>
	Info = Debian
<% end -%>

	# Comma separated list of IP addresses on which the server should
	# listen. Default values are:
	# "0.0.0.0" or (if compiled with IPv6 support) "::,0.0.0.0"
	# so the server listens on all IP addresses of the system by default.
<% tmp_listen = '' -%>
<% if listen -%>
<% tmp_listen = listen.join(',') -%>
<% end -%>
<% if listen6 -%>
<% tmp_listen += ',' + listen6.join(',') -%>
<% end -%>
<% if ! tmp_listen.empty? -%>
	Listen = <%= tmp_listen %>
<% else -%>
	;Listen
<% end -%>

	# Text file with the "message of the day" (MOTD). This message will
	# be shown to all users connecting to the server:
	MotdFile = /etc/ngircd/ngircd.motd

	# A simple Phrase (<256 chars) if you don't want to use a motd file.
	;MotdPhrase = "Hello. This is the Debian default MOTD sentence"

	# Global password for all users needed to connect to the server.
	# (Default: not set)
	;Password = wealllikedebian

	# This tells ngIRCd to write its current process ID to a file.
	# Note that the pidfile is written AFTER chroot and switching the
	# user ID, e.g. the directory the pidfile resides in must be
	# writable by the ngIRCd user and exist in the chroot directory.
	# Keep this setting in sync with PIDFILE in /etc/init.d/ngircd
	PidFile = /var/run/ngircd/ngircd.pid

	# Ports on which the server should listen. There may be more than
	# one port, separated with ",". (Default: 6667)
	Ports = <%= ports.join(',') %>

	# Group ID under which the ngIRCd should run; you can use the name
	# of the group or the numerical ID. ATTENTION: For this to work the
	# server must have been started with root privileges!
	# Keep this setting in sync with DAEMONUSER in /etc/init.d/ngircd
	ServerGID = irc

	# User ID under which the server should run; you can use the name
	# of the user or the numerical ID. ATTENTION: For this to work the
	# server must have been started with root privileges! In addition,
	# the configuration and MOTD files must be readable by this user,
	# otherwise RESTART and REHASH won't work!
	# Keep this setting in sync with DAEMONUSER in /etc/init.d/ngircd
	ServerUID = irc

[Limits]
	# Define some limits and timeouts for this ngIRCd instance. Default
	# values should be safe, but it is wise to double-check :-)

	# The server tries every <ConnectRetry> seconds to establish a link
	# to not yet (or no longer) connected servers.
	ConnectRetry = 60

	# Maximum number of simultaneous in- and outbound connections the
	# server is allowed to accept (0: unlimited):
	MaxConnections = 500

	# Maximum number of simultaneous connections from a single IP address
	# the server will accept (0: unlimited):
	MaxConnectionsIP = 10

	# Maximum number of channels a user can be member of (0: no limit):
	MaxJoins = 10

	# Maximum length of an user nick name (Default: 9, as in RFC 2812).
	# Please note that all servers in an IRC network MUST use the same
	# maximum nick name length!
	;MaxNickLength = 9

	# After <PingTimeout> seconds of inactivity the server will send a
	# PING to the peer to test whether it is alive or not.
	PingTimeout = 120

	# If a client fails to answer a PING with a PONG within <PongTimeout>
	# seconds, it will be disconnected by the server.
	PongTimeout = 20

[Options]
	# Optional features and configuration options to further tweak the
	# behavior of ngIRCd. If you want to get started quickly, you most
	# probably don't have to make changes here -- they are all optional.

	# Are remote IRC operators allowed to control this server, e.g.
	# use commands like CONNECT, SQUIT, DIE, ...?
	;AllowRemoteOper = no

	# A directory to chroot in when everything is initialized. It
	# doesn't need to be populated if ngIRCd is compiled as a static
	# binary. By default ngIRCd won't use the chroot() feature.
	# ATTENTION: For this to work the server must have been started
	# with root privileges!
	;ChrootDir = /var/empty

	# Set this hostname for every client instead of the real one.
	# Please note: don't use the percentage sign ("%"), it is reserved for
	# future extensions!
	;CloakHost = cloaked.host

	# Use this hostname for hostname cloaking on clients that have the
	# user mode "+x" set, instead of the name of the server.
	# Please note: don't use the percentage sign ("%"), it is reserved for
	# future extensions!
	;CloakHostModeX = cloaked.user

	# Set every clients' user name to their nick name
	;CloakUserToNick = yes

	# Try to connect to other IRC servers using IPv4 and IPv6, if possible.
	;ConnectIPv6 = yes
	;ConnectIPv4 = yes

	# Do any DNS lookups when a client connects to the server.
	;DNS = yes

	# Do IDENT lookups if ngIRCd has been compiled with support for it.
	# Users identified using IDENT are registered without the "~" character
	# prepended to their user name.
	# Note: The Debian package was compiled without ident support.
	;Ident = yes

	# Enhance user privacy slightly (useful for IRC server on TOR or I2P)
	# by censoring some information like idle time, logon time, etc.
	;MorePrivacy = no

	# Normally ngIRCd doesn't send any messages to a client until it is
	# registered. Enable this option to let the daemon send "NOTICE AUTH"
	# messages to clients while connecting.
	;NoticeAuth = no

	# Should IRC Operators be allowed to use the MODE command even if
	# they are not(!) channel-operators?
	OperCanUseMode = yes

	# Mask IRC Operator mode requests as if they were coming from the
	# server? (This is a compatibility hack for ircd-irc2 servers)
	;OperServerMode = no

	# Use PAM if ngIRCd has been compiled with support for it.
	# Users identified using PAM are registered without the "~" character
	# prepended to their user name.
	# Note: The Debian package was compiled without PAM support.
	;PAM = yes

	# When PAM is enabled, all clients are required to be authenticated
	# using PAM; connecting to the server without successful PAM
	# authentication isn't possible.
	# If this option is set, clients not sending a password are still
	# allowed to connect: they won't become "identified" and keep the "~"
	# character prepended to their supplied user name.
	# Please note: To make some use of this behavior, it most probably
	# isn't useful to enable "Ident", "PAM" and "PAMIsOptional" at the
	# same time, because you wouldn't be able to distinguish between
	# Ident'ified and PAM-authenticated users: both don't have a "~"
	# character prepended to their respective user names!
	;PAMIsOptional = no

	# Allow Pre-Defined Channels only (see Section [Channels])
	;PredefChannelsOnly = no

	# Let ngIRCd send an "authentication PING" when a new client connects,
	# and register this client only after receiving the corresponding
	# "PONG" reply.
	;RequireAuthPing = no

	# Silently drop all incoming CTCP requests.
	;ScrubCTCP = no

	# Syslog "facility" to which ngIRCd should send log messages.
	# Possible values are system dependent, but most probably auth, daemon,
	# user and local1 through local7 are possible values; see syslog(3).
	# Default is "local5" for historical reasons, you probably want to
	# change this to "daemon", for example.
	SyslogFacility = local1

	# Password required for using the WEBIRC command used by some
	# Web-to-IRC gateways. If not set/empty, the WEBIRC command can't
	# be used. (Default: not set)
	;WebircPassword = xyz

[SSL]
	# SSL-related configuration options.

	# SSL Server Key Certificate
<% if ssl_cert -%>
	CertFile = /etc/ssl/certs/<%= ssl_cert %>.pem
<% else -%>
	;CertFile = /etc/ssl/certs/server.crt
<% end -%>

	# Diffie-Hellman parameters
<% if ssl_dh_params -%>
	DHFile = /etc/ngircd/dhparams.pem
<% else -%>
	;DHFile = /etc/ngircd/dhparams.pem
<% end -%>

	# SSL Server Key
<% if ssl_cert -%>
	KeyFile = /etc/ssl/private/<%= ssl_cert %>.key
<% else -%>
	;KeyFile = /etc/ssl/private/server.key
<% end -%>

	# password to decrypt SSLKeyFile (OpenSSL only)
	# Note that this Debian package was linked against GnuTLS so this
	# option has no effect.
	;KeyFilePassword = secret

	# Additional Listen Ports that expect SSL/TLS encrypted connections
<% if ssl_ports -%>
	Ports = <%= ssl_ports.join(',') %>
<% else -%>
	;Ports = 6697, 9999
<% end -%>
