#!/bin/sh
usage () {
	echo "usage: ${0} NAME [OPTIONS]" >&2
	echo " NAME is the name of the Virtual Machine"
	echo " OPTIONS are:" >&2
	echo "  -c|--cpus NUM             - Number of CPUs for the VM (default: 1)." >&2
	echo "  -m|--memory NUM           - Amount of memory (in MegaBytes) for the VM (default: 1024)." >&2
	echo "  -v|--vg|--volume-group VG - Name of the volume group (for the disk), if VG is a" >&2
	echo "                              directory, create QCOW images in that directory instead" >&2
	echo "                              (default: vg)." >&2
	echo "  -d|--disk-size NUM        - Size in GigaBytes of the disk (default: 14)." >&2
	echo "  --disk-splitsize NUM      - Split the disk in slices of NUM GigaBytes each (default:" >&2
	echo "                              empty (=don't split))." >&2
	echo "  -i|disk-image FILE        - Use this diskimage for the harddisk. Can either be a local file or" >&2
	echo "                              a URL (default: http://ftp.nl.debian.org/debian/dist/wheezy/main/" >&2
	echo "                              installer-amd64/current/images/netboot/mini.iso." >&2
	echo "  --vnc-port PORT           - The port-number for VNC connections (default: empty (=auto))." >&2
	echo "  --vnc-secret SECRET       - The password for VNC connections (default: empty (=no secret)." >&2
	echo "  -b|--bridge BRIDGE        - The bridge device to attach the VM to (default: br0)." >&2
	echo "  --mac-address ADDRESS     - The MAC-Address of the VM's network interface (default: empty (=auto))." >&2
	echo "" >&2
	echo " Use the following options if you need a second NIC in the VM:" >&2
	echo "  --bridge-2 BRIDGE         - The bridge device to attach the second NIC in the VM to (default: none)." >&2
	echo "  --mac-address-2 ADDRESS   - The MAC-Address of the VM's second network interface (default: empty (=auto))." >&2
	echo "" >&2
}

# Have getopt parse the arguments
ARGS=`/usr/bin/getopt -o c:m:v:d:i:b:h -l cpus:,memory:,vg:,volume-group:,disk-size:,disk-splitsize:,disk-image:,vnc-port:,vnc-secret:,bridge:,mac-address:,bridge-2:,mac-address-2:,help -n $0 -- "$@"`

if [ $? -ne 0 ]; then # If something went wrong
	echo "" >&2
	usage
	exit 1
fi

eval set -- "$ARGS"

while true; do
	case "$1" in
		-c|--cpus) NPROC=$2; shift 2;;
		-m|--memory) RAM_MB=$2; shift 2;;
		-v|--vg|--volume-group) DISK_VOLGRP=$2; shift 2;;
		-d|--disk-size) DISK_GB=$2; shift 2;;
		--disk-splitsize) DISK_SPLITSIZE=$2; shift 2;;
		-i|--disk-image) DISK_IMAGE=$2; shift 2;;
		--vnc-port) VNC_PORT=$2; shift 2;;
		--vnc-secret) VNC_SECRET=$2; shift 2;;
		-b|--bridge) BRIDGE_DEV=$2; shift 2;;
		--mac-address) MACADDRESS=$2; shift 2;;
		--bridge-2) BRIDGE2_DEV=$2; shift 2;;
		--mac-address-2) MACADDRESS2=$2; shift 2;;
		-h|--help) usage; exit 0;;
		--) shift; break;;
		*) exit 1;;
	esac
done

if [ -z $1 ]; then
	echo "error: please supply a NAME for the VM (see ${0} --help)" >&2
	exit 1
elif [ $# -gt 1 ]; then
	echo "error: too many arguments: ${@}"
	exit 1
else
	NAME=$1
	shift
fi

if [ $(id -u) -ne 0 ]; then
	echo 'error: please run this script as root.' >&2
	exit 1
fi

NPROC="${NPROC:-"1"}"
RAM_MB="${RAM_MB:-"1024"}"
DISK_VOLGRP="${DISK_VOLGRP:-"vg"}"
DISK_GB="${DISK_GB:-"14"}"
DISK_SPLITSIZE="${DISK_SPLITSIZE:-"-"}"
DISK_IMAGE="${DISK_IMAGE:-"http://ftp.nl.debian.org/debian/dists/wheezy/main/installer-amd64/current/images/netboot/mini.iso"}"
VNC_PORT="${VNC_PORT:-"-"}"
VNC_SECRET="${VNC_SECRET:-"-"}"
BRIDGE_DEV="${BRIDGE_DEV:-"br0"}"
MACADDRESS="${MACADDRESS:-"-"}"
BRIDGE2_DEV="${BRIDGE2_DEV:-"-"}"
MACADDRESS2="${MACADDRESS2:-"-"}"

echo "About to create a VM named '${NAME}', with the following options:"
echo "CPUs:                 $NPROC"
echo "Memory:               $RAM_MB MB"
echo "Disk size:            $DISK_GB GB"
if [ $DISK_SPLITSIZE != '-' ]; then
echo "Disk split in:        $DISK_SPLITSIZE GB chunks"
fi
echo "Disk Volume Group:    $DISK_VOLGRP"
echo "Using harddisk image: $DISK_IMAGE"
echo -n "VNC port:             "
if [ $VNC_PORT = '-' ]; then
	echo "auto"
else
	echo $VNC_PORT
fi
echo -n "VNC secret:           "
if [ $VNC_SECRET = '-' ]; then
	echo "none"
else
	echo $VNC_SECRET
fi
echo "Bridge device:        $BRIDGE_DEV"
echo -n "MAC Address:          "
if [ $MACADDRESS = '-' ]; then
	echo "auto"
else
	echo $MACADDRESS
fi
if [ $BRIDGE2_DEV != '-' ]; then
	echo "2nd NIC bridge:       $BRIDGE2_DEV"
	echo -n "2nd NIC MAC Address:  "
	if [ $MACADDRESS2 = '-' ]; then
		echo "auto"
	else
		echo $MACADDRESS2
	fi
fi
echo -n "Press CTRL+C if you do not want this within 5 "; /bin/sleep 1
echo -n "4 "; /bin/sleep 1; echo -n "3 "; /bin/sleep 1; echo -n "2 "; /bin/sleep 1
echo -n "1 "; /bin/sleep 1; echo "starting.."

set -e -x

CREATED=`/bin/date -R`

# Create the disk.
I=0
while test $DISK_GB -gt 0
do
	if test $DISK_SPLITSIZE != '-' && test $DISK_GB -gt $DISK_SPLITSIZE
	then
		SLICE=$DISK_SPLITSIZE
	else
		SLICE=$DISK_GB
	fi
	DISKDEV_VM="vd`echo abcdefghijklmnopqrstuvwxyz | /usr/bin/cut -b $(($I + 1))`"
	if test -d $DISK_VOLGRP
	then
		# Use qcow2
		DISKDEV_HOST="$DISK_VOLGRP/$NAME-disk$I"
		DISK_CONFIG="$DISK_CONFIG
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2' cache='none'/>
      <source file='$DISKDEV_HOST'/>
      <target dev='$DISKDEV_VM' bus='virtio'/>
    </disk>"
		/usr/bin/qemu-img create -f qcow2 -o cluster_size=2M,preallocation=metadata $DISKDEV_HOST ${SLICE}G
	else
		# Use logical volume
		DISKDEV_HOST="/dev/$DISK_VOLGRP/$NAME-disk$I"
		DISK_CONFIG="$DISK_CONFIG
    <disk type='block' device='disk' cache='none'>
      <source dev='$DISKDEV_HOST'/>
      <target dev='$DISKDEV_VM' bus='virtio'/>
      <alias name='virtio-disk0'/>
    </disk>"
		/sbin/lvcreate -L ${SLICE}G -n $NAME-disk$I $DISK_VOLGRP
		/bin/dd if=/dev/zero of=$DISKDEV_HOST bs=1M count=1000
	fi

	DISK_GB=$(($DISK_GB - $SLICE))
	I=$(($I + 1))
done

# Generate VNC password if needed.
if test $VNC_PORT = '-'
then
	GRAPHICS_CONFIG="autoport='yes'"
else
	GRAPHICS_CONFIG="autoport='no' port='$VNC_PORT'"
fi
test $VNC_SECRET = '-' || GRAPHICS_CONFIG="$GRAPHICS_CONFIG passwd='$VNC_SECRET'"

if ! test -d $DISK_VOLGRP
then
	# We want an initial installation PXE thingy.
	DD="/bin/dd of=/dev/$DISK_VOLGRP/$NAME-disk0 bs=1M"
	case $DISK_IMAGE in
	ftp://*|http://*|https://*)
		/usr/bin/wget -O - $DISK_IMAGE | $DD
		;;
	*)
		$DD if=$DISK_IMAGE
		;;
	esac
fi

if [ "${MACADDRESS}" != '-' ]; then
	MAC_CONFIG="      <mac address='${MACADDRESS}'/>"
fi

if [ $BRIDGE2_DEV != '-' ]; then
	NIC2_CONFIG="    <interface type='bridge'>"
	if [ $MACADDRESS2 != '-' ]; then
		NIC2_CONFIG="${NIC2_CONFIG}
     <mac address='${MACADDRESS2}'/>"
	fi
	NIC2_CONFIG="${NIC2_CONFIG}
     <source bridge='$BRIDGE2_DEV'/>
     <target dev='${NAME}_eth1'/>
     <model type='virtio'/>
    </interface>"
fi

# Create the configuration for libvirt.
/usr/bin/virsh define /dev/stdin << EOF
<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
  <name>$NAME</name>
  <description>Created on: $CREATED</description>
  <memory>$(($RAM_MB * 1024))</memory>
  <currentMemory>$(($RAM_MB * 1024))</currentMemory>
  <vcpu>$NPROC</vcpu>
  <os>
    <type arch='x86_64' machine='pc-0.12'>hvm</type>
    <boot dev='network'/>
    <boot dev='hd'/>
    <boot dev='cdrom'/>
  </os>
  <features>
    <acpi/>
    <pae/>
  </features>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <devices>
    <emulator>/usr/bin/kvm</emulator>
$DISK_CONFIG
    <interface type='bridge'>
$MAC_CONFIG
      <source bridge='$BRIDGE_DEV'/>
      <target dev="${NAME}_eth0"/>
      <model type='virtio'/>
    </interface>
$NIC2_CONFIG
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' listen='0.0.0.0' $GRAPHICS_CONFIG/>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
    </video>
  </devices>
</domain>
EOF

# Systems should autostart.
/usr/bin/virsh autostart $NAME
